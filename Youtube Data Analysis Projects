
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from pymongo import MongoClient
from pymongo import MongoClient
import json
from datetime import datetime
import sys
import pandas as pd
import streamlit as st
st.set_page_config(layout="wide")

API_KEY='AIzaSyCLfAiyeag_eiwLzBKi1HxUNhsHft82bscy'  
youtube = build('youtube', 'v3', developerKey=API_KEY)

from pymongo import MongoClient
client = MongoClient("mongodb://localhost:27017") 
db = client["youtube_data_lake_db"]  
collection = db["channels_data_collection"]  

import pymysql

# Your database connection parameters
host = 'localhost'
port = 3306  # Replace with your actual port number
user = 'root'
password = 'password'

# Connect to MySQL server
conn = pymysql.connect(host=host, port=port, user=user, password=password)

# Create a cursor object
cursor = conn.cursor()

# Create the database if it doesn't exist
database_name = 'youtube_datawarehouse'
cursor.execute(f"CREATE DATABASE IF NOT EXISTS {database_name}")

# Use the created database
cursor.execute(f"USE {database_name}")

# Commit the changes and close the connection
conn.commit()
conn.close()

from googleapiclient.discovery import build

def get_channel_id(api_key, channel_name):
    youtube = build('youtube', 'v3', developerKey=api_key)

    try:
        response = youtube.search().list(
            part='id',
            q=channel_name,
            type='channel'
        ).execute()

        channel = response['items'][0]
        channel_id = channel['id']['channelId']
        return channel_id

    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Example usage
api_key = 'AIzaSyCLfAiyeag_eiwLzBKi1HxUNhsHft82bsc'
channel_name = 'jared polin'
channel_id = get_channel_id(api_key, channel_name)

if channel_id:
    print(f"Channel ID for {channel_name}: {channel_id}")
else:
    print(f"Channel ID not found for {channel_name}")

#out: Channel ID for jared polin: UCZG-C5esGZyVfxO2qXa1Zmw

def is_valid_channel(channel_id):
        response = youtube.channels().list(
            part='snippet',
            id=channel_id
        ).execute()
        return response['items']

def get_channel_details(channel_id):
    response = youtube.channels().list(
        part='snippet,statistics,contentDetails',
        id=channel_id
    ).execute()
    channel_details = response['items'][0]
    return channel_details

def get_channel_playlists(channel_id):
        response = youtube.playlists().list(
            part='snippet',
            channelId=channel_id,
            maxResults=100  # Adjust the maximum number of playlists 
        ).execute()
        playlists = response['items']
        channel_playlists={}
        for playlist in playlists:
            playlist_id = playlist['id']
            playlist_title = playlist['snippet']['title']
            channel_playlists[playlist_title]=playlist_id
        return channel_playlists

def get_playlist_videos(playlist_id):
    response = youtube.playlistItems().list(
        part='snippet',
        playlistId=playlist_id,
        maxResults=50
    ).execute()

    videos = response['items']
    playlist_videos = {}
    if not videos:
        return playlist_videos

    for video in videos:
        video_id = video['snippet']['resourceId']['videoId']
        video_title = video['snippet']['title']

        video_info = youtube.videos().list(
            part='snippet,statistics,contentDetails',
            id=video_id
        ).execute()
        if 'items' not in video_info or len(video_info['items']) == 0:
            continue # Skip videos without any information available
        video_data = video_info['items'][0]
        video_details = {
            'Video_Id': video_id,
            'Video_Name': video_title,
            'Video_Description': video_data['snippet']['description'],
            'Tags': video_data['snippet'].get('tags', []),
            'PublishedAt': video_data['snippet']['publishedAt'],
            'View_Count': video_data['statistics'].get('viewCount', 0),
            'Like_Count': video_data['statistics'].get('likeCount', 0),
            'Favorite_Count': video_data['statistics'].get('favoriteCount', 0),
            'Duration': video_data['contentDetails']['duration'],
            'Thumbnail': video_data['snippet']['thumbnails']['default']['url'],
            'Comments': {}
        }
        try:
            comment_response = youtube.commentThreads().list(
                part='snippet',
                videoId=video_id,
                maxResults=100 # Adjust the maximum number of comments 
            ).execute()
            comments = comment_response['items']
            for comment in comments:
                comment_id = comment['id']
                comment_text = comment['snippet']['topLevelComment']['snippet']['textDisplay']
                comment_author = comment['snippet']['topLevelComment']['snippet']['authorDisplayName']
                comment_published_at = comment['snippet']['topLevelComment']['snippet']['publishedAt']

                comment_details = {
                    'Comment_Id': comment_id,
                    'Comment_Text': comment_text,
                    'Comment_Author': comment_author,
                    'Comment_PublishedAt': comment_published_at
                }
                video_details['Comments'][comment_id] = comment_details
            playlist_videos[video_id] = video_details
        except HttpError as e:
            if e.resp.status == 403 and b'commentsDisabled' in e.content:
                video_details['Comments'] = {}
    return playlist_videos
def migrate_data_to_sql(channel_name_input):

    # check if channel entered exists in mongodb
    unique_channels_mongodb = collection.distinct('Channel_ID')
    channels_mongodb=[]
    for value in unique_channels_mongodb:
        channels_mongodb.append(value)
    if channel_name_input not in channels_mongodb:
        return 'Please enter a channel that is present in mongodb'

    # check if channel already present in mysql
    select_query = f'''SELECT Channel_ID FROM channels WHERE Channel_ID = "{channel_name_input}"'''
    cursor.execute(select_query)
    existing_channel = cursor.rowcount
    if existing_channel>0:
        return "Channel already exists in the database."

    channels_table={}
    playlist_instant={}
    playlists_table=[]
    video={}
    videos_table=[]
    comment={}
    comments_table=[]

    # converting mongodb document to mysql tables
    query = {"Channel_ID": channel_name_input}
    complete_channel_info = collection.find(query)
    for subpart_channel_info in complete_channel_info:
        for channel_field in subpart_channel_info: 
            if channel_field=='Channel_Name':
                Channel_Name = subpart_channel_info[channel_field]
                channels_table['Channel_Name']=Channel_Name
            if channel_field=='Channel_ID':
                Channel_ID=subpart_channel_info[channel_field]
                channels_table['Channel_ID']=Channel_ID
                playlist_instant['Channel_ID']=Channel_ID
            if channel_field=='Subscription_Count':
                Subscription_Count=subpart_channel_info[channel_field]
                channels_table['Subscription_Count']=Subscription_Count
            if channel_field=='Channel_Views':
                Channel_Views=subpart_channel_info[channel_field]
                channels_table['Channel_Views']=Channel_Views
            if channel_field=='Channel_Description':
                Channel_Description=subpart_channel_info['Channel_Description']
                channels_table['Channel_Description']=Channel_Description
            if channel_field=='Playlist_Name':
                Playlist_Name=subpart_channel_info[channel_field]
                playlist_instant['Playlist_Name']=Playlist_Name
            if channel_field=='Channel_Video_Count':
                Channel_Video_Count=subpart_channel_info[channel_field]
                channels_table['Channel_Video_Count']=Channel_Video_Count
            if channel_field=='Playlist_Id':
                Playlist_Id=subpart_channel_info[channel_field]
                playlist_instant['Playlist_Id']=Playlist_Id
            if channel_field=='Videos_Details':
                for video_instant in  subpart_channel_info[channel_field]:
                    for video_entry in subpart_channel_info[channel_field][video_instant]:  
                        if video_entry=='Video_Id':
                            Video_Id=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Video_Id']=Video_Id
                        if video_entry=='Video_Name':
                            Video_Name=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Video_Name']=Video_Name
                        if video_entry=='Video_Description':
                            Video_Description=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Video_Description']=Video_Description
                        if video_entry=='PublishedAt':
                            PublishedAt=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['PublishedAt']=PublishedAt
                        if video_entry=='View_Count':
                            View_Count=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['View_Count']=View_Count
                        if video_entry=='Like_Count':
                            Like_Count=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Like_Count']=Like_Count
                        if video_entry=='Favorite_Count':
                            Favorite_Count=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Favorite_Count']=Favorite_Count
                        if video_entry=='Comment_Count':
                            Comment_Count=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Comment_Count']=Comment_Count
                        if video_entry=='Duration':
                            Duration=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Duration']=Duration
                        if video_entry=='Thumbnail':
                            Thumbnail=subpart_channel_info[channel_field][video_instant][video_entry]
                            video['Thumbnail']=Thumbnail
                        if video_entry =='Comments':
                            for comment_instant in subpart_channel_info[channel_field][video_instant][video_entry]:
                                for comment_entry in subpart_channel_info[channel_field][video_instant][video_entry][comment_instant]:
                                    if comment_entry=='Comment_Id':
                                        Comment_Id=subpart_channel_info[channel_field][video_instant][video_entry][comment_instant][comment_entry]
                                        comment['Comment_Id']=Comment_Id
                                    if comment_entry=='Comment_Text':
                                        Comment_Text=subpart_channel_info[channel_field][video_instant][video_entry][comment_instant][comment_entry]
                                        comment['Comment_Text']=Comment_Text
                                    if comment_entry=='Comment_Author':
                                        Comment_Author=subpart_channel_info[channel_field][video_instant][video_entry][comment_instant][comment_entry]
                                        comment['Comment_Author']=Comment_Author
                                    if comment_entry=='Comment_PublishedAt':
                                        Comment_PublishedAt=subpart_channel_info[channel_field][video_instant][video_entry][comment_instant][comment_entry]
                                        comment['Comment_PublishedAt']=Comment_PublishedAt
                                vpid=''.join([Playlist_Id,Video_Id])
                                comment['Video_Id']=vpid
                                cvpid=''.join([Playlist_Id,Video_Id,Comment_Id])
                                comment['CVP_Id']=cvpid
                                comments_table.append(comment)
                                comment={}
                    video['Playlist_Id']=Playlist_Id
                    vpid=''.join([video['Playlist_Id'],video['Video_Id']])
                    video['VP_Id']=vpid
                    videos_table.append(video)
                    video={}
        playlists_table.append(playlist_instant)
        playlist_instant={}

    # insert into channels table
    query = '''
        INSERT INTO channels (Channel_Name, Channel_ID, Channel_Description, Subscription_Count, Channel_Views, Channel_Video_Count)
        VALUES (%(Channel_Name)s, %(Channel_ID)s, %(Channel_Description)s, %(Subscription_Count)s, %(Channel_Views)s, %(Channel_Video_Count)s)
    '''
    values = {
        'Channel_Name': channels_table['Channel_Name'],
        'Channel_ID': channels_table['Channel_ID'],
        'Channel_Description': channels_table['Channel_Description'],
        'Subscription_Count': int(channels_table['Subscription_Count']),
        'Channel_Views': int(channels_table['Channel_Views']),
        'Channel_Video_Count': int(channels_table['Channel_Video_Count'])
    }
    cursor.execute(query, values)

    p_count = 0
    v_count = 0  
    o_count = 0  

    # insert into playlists table
    for playlist in playlists_table:
        query = '''
            INSERT INTO playlists (Channel_ID, Playlist_Name, Playlist_Id)
            VALUES (%(Channel_ID)s, %(Playlist_Name)s, %(Playlist_Id)s)
        '''
        values = {
            'Channel_ID': playlist['Channel_ID'],
            'Playlist_Name': playlist['Playlist_Name'],
            'Playlist_Id': playlist['Playlist_Id']
        }
        cursor.execute(query, values)
        p_count +=cursor.rowcount
    
    # insert into videos table 
    for video in videos_table:
        query = '''
            INSERT INTO videos (VP_Id, Video_Id, Video_Name, Video_Description, PublishedAt, View_Count, Like_Count, Favorite_Count, Duration, Thumbnail, Playlist_Id)
            VALUES (%(VP_Id)s, %(Video_Id)s, %(Video_Name)s, %(Video_Description)s, %(PublishedAt)s, %(View_Count)s, %(Like_Count)s, %(Favorite_Count)s, %(Duration)s, %(Thumbnail)s, %(Playlist_Id)s)
        '''
        values = {
            'VP_Id': video['VP_Id'],
            'Video_Id': video['Video_Id'],
            'Video_Name': video['Video_Name'],
            'Video_Description': video['Video_Description'],
            'PublishedAt': datetime.strptime(video['PublishedAt'], '%Y-%m-%dT%H:%M:%SZ'),
            'View_Count': int(video['View_Count']),
            'Like_Count': int(video['Like_Count']),
            'Favorite_Count': int(video['Favorite_Count']),
            'Duration': video['Duration'],
            'Thumbnail': video['Thumbnail'],
            'Playlist_Id': video['Playlist_Id']
        }
        cursor.execute(query, values)
        v_count += cursor.rowcount 

    # insert into comments table
    if comments_table:
        for comment in comments_table:

            comment_published_at = datetime.strptime(comment['Comment_PublishedAt'], '%Y-%m-%dT%H:%M:%SZ')
            comment_published_at_formatted = comment_published_at.strftime('%Y-%m-%d %H:%M:%S')
            query = '''
                INSERT INTO comments (CVP_Id, Comment_Id, Comment_Text, Comment_Author, Comment_PublishedAt, Video_Id)
                VALUES (%(CVP_Id)s, %(Comment_Id)s, %(Comment_Text)s, %(Comment_Author)s, %(Comment_PublishedAt)s, %(Video_Id)s)
            '''
            values = {
                'CVP_Id': comment['CVP_Id'],
                'Comment_Id': comment['Comment_Id'],
                'Comment_Text': comment['Comment_Text'],
                'Comment_Author': comment['Comment_Author'],
                'Comment_PublishedAt': comment_published_at_formatted,
                'Video_Id': comment['Video_Id']
            }
            cursor.execute(query, values)
            o_count += cursor.rowcount 
    conn.commit()
    return f'Channel Name:{channels_table["Channel_Name"]} <br>Number of Playlist Inserted:{p_count} <br>Number of Videos Inserted:{v_count}<br>Number of Comments Inserted:{o_count}'

st.markdown("<h1 style='text-align: center; color: rgb(37, 142, 142);'>Youtube Data Harvesting and Warehousing</h1>", unsafe_allow_html=True)
st.markdown("---") 
max_height = 200  
style = f"max-height: {max_height}px; overflow-y: auto;"
